'''
By Rasmus Jensen, 2024, idea based on script by Jonathan Wagner, 2024
To prepare data for pytom, this script will extract the defocus values and tilt angles from the XML files generated by Warp.
It will also create symlinks to the tomograms and generate defocus, dose, and tilt files for each tilt series.
The script takes the following arguments:
    - tomostar_dir: Directory containing .tomostar files
    - xml_dir: Directory containing XML files
    - reconstruction_dir: Directory containing reconstruction files
    - tomogram_suffix: Suffix to find tomograms (default is .mrc)
    - output_dir: Base directory to store output files
'''

import os
import xml.etree.ElementTree as ET
import argparse
from glob import glob
from pathlib import Path

class TiltSeries:
    def __init__(self,name: str,defocus: list,tlt: list,tomogram_directory: str, tomostar_directory: str , tomogram_suffix : str):
        if len(defocus) != len(tlt):
            raise ValueError(f"Length of defocus and tlt do not match for {name}")
        self.name = name
        self.defocus = defocus
        self.tlt = tlt
        self.suffix = tomogram_suffix
        self.tomo = self.find_tomogram(tomogram_directory)
        self.find_tomostar(tomostar_directory)

    def find_tomogram(self, tomogram_directory):
        tomogram = glob(f'{tomogram_directory}/{self.name}*{self.suffix}')
        if len(tomogram) != 1:
            raise ValueError(f"Tomogram not found for {self.name}\nOutput of glob: {tomogram}")
        return tomogram[0]
    
    def read_tomostar(self):
        with open(self.tomostar, 'r') as file:
            lines = [x.strip() for x in file.readlines()]
        mode = None
        tlt, dose = [], []
        for line in lines:
            if line.startswith('_'):
                mode = 'header'
                continue
            if mode == 'header':
                if not line.startswith('_'):
                    mode = 'data'
            if mode == 'data':
                line_data = [x for x in line.split() if x != '']
                if len(line_data) < 4:
                    continue
                tlt.append(float(line_data[1]))
                dose.append(float(line_data[3]))
        self.dose = dose
        if len(self.tlt) == len(tlt):
            self.tlt = tlt
            return
        rounded_tlts = [round(float(x),0) for x in tlt]
        self.defocus = [self.defocus[idx] for idx,tlt_angle in enumerate(self.tlt) if round(tlt_angle,0) in rounded_tlts]
        self.tlt = tlt

    def find_tomostar(self, tomostar_directory):
        tomostar = glob(f'{tomostar_directory}/{self.name}.tomostar')
        if len(tomostar) != 1:
            raise ValueError(f"Tomostar file not found for {self.name}\nOutput of glob: {tomostar}")
        self.tomostar = tomostar[0]
        self.read_tomostar()

    def write_files(self, output_dir):
        self.write_to_file(f'{output_dir}/{self.name}_defocus.txt', self.defocus)
        self.write_to_file(f'{output_dir}/{self.name}.tlt', self.tlt)
        self.write_to_file(f'{output_dir}/{self.name}_dose.txt', self.dose)
        os.symlink(Path(self.tomo).absolute(), Path(f'{output_dir}/{self.name}.mrc'))

    def write_to_file(self, file, data):
        with open(file, 'w') as f:
            for val in data:
                f.write(f"{val}\n")

def extract_data_xml_files(xml, tomogram_directory, tomostar_directory, tomogram_suffix) -> TiltSeries:
    print(xml)
    tree = ET.parse(xml)
    root = tree.getroot()
    grid_ctf = root.find(".//GridCTF")
    if grid_ctf is None:
        raise ValueError(f"GridCTF element not found in XML for {xml}")
    defocus_values = [node.get('Value') for node in grid_ctf.findall('Node')]
    tlt = root.find("Angles")
    tlt = root.find("Angles").text.split('\n')
    return TiltSeries(str(xml.stem), defocus_values,tlt, tomogram_directory, tomostar_directory, tomogram_suffix)

def parse_args():
    parser = argparse.ArgumentParser(description="Process reconstruction files and generate symlinks, defocus, dose, and tlt files.")
    parser.add_argument('-t','--tomostar_dir', required=True, help="Directory containing .tomostar files")
    parser.add_argument('-x','--xml_dir', required=True, help="Directory containing XML files")
    parser.add_argument('-r','--reconstruction_dir', required=True, default=False, help="Directory containing reconstruction files")
    parser.add_argument('-s', '--tomogram_suffix', required=False, default='.mrc', help='Any suffix to find tomograms')
    parser.add_argument('-o','--output_dir', required=True, help="Base directory to store output files")
    return parser.parse_args()

def main():
    args = parse_args()
    tlt_series = [extract_data_xml_files(xml, args.reconstruction_dir, args.tomostar_dir, args.tomogram_suffix) for xml in Path(args.xml_dir).glob(f'*.xml')]
    if not Path(args.output_dir).is_dir():
        os.mkdir(args.output_dir)
    [series.write_files(args.output_dir) for series in tlt_series]

if __name__ == '__main__':
    main()


'_10.00Apx.mrc'
